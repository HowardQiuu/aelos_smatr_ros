<launch>

<node name="usb_cam_chest" pkg="usb_cam" type="usb_cam_node" respawn="true" respawn_delay="30" output="screen" >
    <param name="video_device" value="/dev/video2" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="pixel_format" value="yuyv" />
    <param name="brightness" value="50" />
    <param name="camera_frame_id" value="chest_usb_cam" />
    <param name="camera_info_url" value="file:///mnt/leju_data/camera_info/chest_camera.yaml" />
    <param name="io_method" value="mmap"/>
</node>

<node name="usb_cam_head" pkg="usb_cam" type="usb_cam_node" respawn="true" respawn_delay="30" output="screen" >
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <param name="brightness" value="50" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="head_usb_cam" />
    <param name="camera_info_url" value="file:///mnt/leju_data/camera_info/head_camera.yaml" />
    <param name="io_method" value="mmap"/>
</node>
  

<node pkg="aelos_smart_ros" type="sensor_service.py" name="sensor_service_node" output="screen" respawn="true" respawn_delay="5"/>
<node pkg="aelos_smart_ros" type="CMDcontrol_service.py" name="CMDcontrol_server_node" output="screen" respawn="true" respawn_delay="5"/>
<node pkg="aelos_smart_ros" type="WSconnect_node.py" name="socket_node" output="screen" respawn="true" respawn_delay="5"/>
<node pkg="broadcast_node" name="broadcast_node" type="broadcast.py" output="screen" respawn="true" respawn_delay="5"/>
<node pkg="broadcast_node" name="leju_log" type="leju_log.py" output="screen" respawn="true" respawn_delay="5"/>

<node pkg="tf" type="static_transform_publisher" name="chest_to_cam" args="0 0 0.2 1.570795 3.14 0.916629 /map /chest_usb_cam 50"/>
<node pkg="tf" type="static_transform_publisher" name="head_to_cam" args="-0.015 0 0.335 1.570795 3.1415926  1.570795  /map /head_usb_cam 50"/>


<group ns="chest">
    <arg name="marker_size" default="4.4" />
    <arg name="max_new_marker_error" default="0.05" />
    <arg name="max_track_error" default="0.05" />
    <arg name="cam_image_topic" default="/usb_cam_chest/image_raw" />
    <arg name="cam_info_topic" default="/usb_cam_chest/camera_info" />
    <arg name="output_frame" default="/map" />

    <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="true" respawn_delay="5" output="screen">
        <param name="marker_size" type="double" value="$(arg marker_size)" />
        <param name="max_new_marker_error" type="double" value="$(arg max_new_marker_error)" />
        <param name="max_track_error" type="double" value="$(arg max_track_error)" />
        <param name="output_frame" type="string" value="$(arg output_frame)" />
        <remap from="camera_image" to="$(arg cam_image_topic)" />
        <remap from="camera_info" to="$(arg cam_info_topic)" />
    </node>
</group>

<group ns="head">
    <arg name="marker_size" default="4.4" />
    <arg name="max_new_marker_error" default="0.05" />
    <arg name="max_track_error" default="0.05" />
    <arg name="cam_image_topic" default="/usb_cam_head/image_raw" />
    <arg name="cam_info_topic" default="/usb_cam_head/camera_info" />
    <arg name="output_frame" default="/map" />

    <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" respawn="true" respawn_delay="5" output="screen">
        <param name="marker_size" type="double" value="$(arg marker_size)" />
        <param name="max_new_marker_error" type="double" value="$(arg max_new_marker_error)" />
        <param name="max_track_error" type="double" value="$(arg max_track_error)" />
        <param name="output_frame" type="string" value="$(arg output_frame)" />
        <remap from="camera_image" to="$(arg cam_image_topic)" />
        <remap from="camera_info" to="$(arg cam_info_topic)" />
    </node>
</group>



<node pkg="web_video_server" type="web_video_server" name="web_video_server" output="screen" />


</launch>
